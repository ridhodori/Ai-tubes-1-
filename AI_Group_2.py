# -*- coding: utf-8 -*-
"""Tubes_AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Gtw9lZCFXLfwZBOA9eUlJphNog6KiYt

Group 2: 
  - Ridho Nobelino S
  - Khaidir Mauladan
  - Putra Dharma B

## **Generate Population**
"""

def generate_population(popsize,chromelength):
    population = []
    for i in range(popsize):
      chromosome = []
      for j in range(chromelength):
        chromosome.append(random.randint(0,1))
      population.append(chromosome)
    return population

def decode(chromosome):
  Xmin = -1
  Xmax = 2
  Ymin = -1
  Ymax = 1
  
  denoValue = 1
  sigmaX = 1
  sigmaY = 1
  
  for i in range (len(chromosome)//2):
    denoValue += 2**(i+1*(-1))
    sigmaX += chromosome[i]*2**(i+1*(-1))
    sigmaY += chromosome[i+(len(chromosome)//2)]*2**(i+1*(-1))

  x = Xmin + ((Xmax - Xmin)/ denoValue) * sigmaX
  y = Ymin + ((Ymax - Ymin)/ denoValue) * sigmaY
  return x, y

"""# **Fitness Function**"""

#F=H
def fitness(chromosome):
  x, y = decode(chromosome)
  return (x*x)*math.sin(math.sin(y*y))+(x+y)

"""### **Best Fitness**"""

def elitism(population):
  fitnessArr = []
  for x in (population):
    fitnessArr.append(fitness(x))
  MaxFitness1Index = fitnessArr.index(max(fitnessArr))
  fitnessArr[MaxFitness1Index] = 0.0
  MaxFitness2Index = fitnessArr.index(max(fitnessArr))
  return population[MaxFitness1Index], population[MaxFitness2Index]

"""# **Parent Selection**"""

#tournament selection 
def tournamentSelection(population, sampleSize):
  Max1 = []
  Max2 = []
  for i in range (sampleSize) :
      indv = population[random.randint(0, len(population)-1)]    
      if (Max1 == []) or fitness(indv) > fitness(Max1) :
          Max1 = indv
  for i in range (sampleSize) :
      indv = population[random.randint(0, len(population)-1)]    
      if (Max2 == []) or fitness(indv) > fitness(Max2) :
          Max2 = indv
  Max1AfterCross, Max2AfterCross = crossover(Max1, Max2, len(population[0]))
  FinalChrome1 = mutation(Max1AfterCross)
  FinalChrome2 = mutation(Max2AfterCross)
  return FinalChrome1, FinalChrome2

def crossover(Max1, Max2, chromelength) :
  if(random.randint(0, 100) <= 70):
    x = random.randint(chromelength//4, chromelength//2)
    crossPos = random.randint(0, chromelength-x-1)
    Maxnew1 = Max1
    Maxnew2 = Max2
    for i in range(x):
      Maxnew1[crossPos+i] = Max2[crossPos+1]
      Maxnew2[crossPos+i] = Max1[crossPos+1]
    return Maxnew1, Maxnew2
  else:
    return Max1, Max2



def mutation(chromosome):
  for i in range (len(chromosome)):
    chance = random.randint(0, 100)
    if (chance <= 1):
      if (chromosome[i] == 1):
        chromosome[i] = 0
      elif (chromosome[i] == 0):
        chromosome[i] = 1
  return chromosome

"""**CREATE GENERATION**"""

def main(PopSize, ChromeLength):
  new_population = []
  CurrentFitnessArray = []
  CurrentFitnessX = []
  CurrentFitnessY = []
  i = 0
  population = generate_population(PopSize, ChromeLength)
  print("========================================================")
  while True:
    i = i + 1
    #We take 2 best from population
    new_population.append(elitism(population)[0])
    new_population.append(elitism(population)[1])
    for k in range(PopSize-2):
      parent1, parent2 = tournamentSelection(population, len(population)//2)
      new_population.append(parent1)
      new_population.append(parent2)
    CurrentFitnessArray.append(fitness(elitism(new_population)[0]))
    CurrentFitnessX.append(decode(elitism(new_population)[0])[0])
    CurrentFitnessY.append(decode(elitism(new_population)[0])[1])
    Best = fitness(elitism(new_population)[0])
    population = new_population
    new_population = []
    if Best == (4)*math.sin(math.sin(1))+(3): #Max Fitness Score Possible
      break 
  print("GENERATIONS SUMMARY: ")
  BestFitnessScore = CurrentFitnessArray[0]
  print("Generation 1 :")
  print("X: ", CurrentFitnessX[0])
  print("Y: ", CurrentFitnessY[0])
  print("Fitness Score: ", BestFitnessScore)
  for ii in range(1, i):
    if CurrentFitnessArray[ii] > BestFitnessScore:
      print("========================================================")
      BestFitnessScore = CurrentFitnessArray[ii]
      print("Generation", ii+1, ":")
      print("X: ", CurrentFitnessX[ii])
      print("Y: ", CurrentFitnessY[ii])
      print("Fitness Score: ", BestFitnessScore)
  print("========================================================")


"""**Main**"""
import time
import math
import random

start = time.process_time()

Population_Size = 5
Chromosome_length = 10

#Main Program
main(Population_Size, Chromosome_length)

print("Time taken: ", time.process_time() - start)